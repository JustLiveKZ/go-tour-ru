Конкурентность
Go предоставляет возможности для конкурентного программирования как часть ядра языка. Этот урок описывает данные
возможности и дает примеры их использования.

Авторы Go
https://golang.org

* Горутины

_Горутина_ - это легковесный поток, управляемый средой исполнения Go.

	go f(x, y, z)

начинает новую горутину, которая запускает

	f(x, y, z)

Вычисление `f`, `x`, `y` и `z` происходит в текущей горутину, а выполнение `f` происходит в новой горутине.

Горутины запускаются в том же адресном пространстве, поэтому доступ к общей памяти должен быть синхронизирован.
Пакет [[https://golang.org/pkg/sync/][`sync`]] предоставляет полезные примитивы, хотя они вам сильно не понадобятся,
так как в Go есть другие примитивы. (Смотрите следующий слайд.)

.play concurrency/goroutines.go

* Каналы

Каланы - типизированные трубы, через которые вы можете отправлять и получать значения,
используя оператор канала, `<-`.

	ch <- v    // Отправить v в канал ch.
	v := <-ch  // Получить значение из ch и
	           // присвоить его v.

(Направление потока данных указывается направление стрелки.)

Как и словари со слайсами, каналы должны быть созданы перед использованием:

	ch := make(chan int)

По умолчанию, отправка и получение блокируются, пока другая сторона не будет готова. Это позволяет горутинам
синхронизироваться без явных блокировок и переменных состояния.

.play concurrency/channels.go

* Буфферизованные каналы

Каналы могут быть _буфферизованными_.  Передайте размер буфера вторым аргументом в функцию `make`,
чтобы создать буфферизованный канал:

	ch := make(chan int, 100)

Отправка в буфферизованный канал блокируется, только если буффер полный.
Получение блокируется, когда буффер пустой.

Измените пример, чтобы переполнить буффер и посмотрите что случится.

.play concurrency/buffered-channels.go

* Закрытие канала и использование range для итерирования

Отправитель может `закрыть` (`close`) канал, чтобы обозначить то, что больше не будет отправлено значений.
Получатели могут узнать, закрыт ли канал, используя второй параметр при получении значения: после

	v, ok := <-ch

`ok` будет `false`, если больше нет значений для получения и канал закрыт.

Цикл `for`i`:=`range`c` получает значения из канала до тех пор, пока он не будет закрыт.

*Замечание:* Только отправитель должен закрывать канал, но не получатель. Отправка в закрытый канал вызовет ошибку.

*Еще одно*замечание*: Каналы не файлы; обычно вам не нужно их закрывать. Закрытие необходимо, только если получатель
должен быть уведомлен о том, что больше значений не будет, например для завершения цикла `range`.

.play concurrency/range-and-close.go

* Select

Оператор `select` позволяет горутине ожидать нескольких операций коммуникации.

Оператор `select` блокируется до тех пор, пока один из его кейсов не сможет продолжить выполнение,
в этом случае выполняется этот кейс. Если несколько кейсов готовы, то выбирается один случайным образом.

.play concurrency/select.go

* Default в Select

Кейс `default` в операторе `select` запускается, если ни один из кейсов не готов.

Используйте кейс `default` для отправки и получения без блокировки:

	select {
	case i := <-c:
		// использовать i
	default:
		// получение из c приведет к блокировке
	}

.play concurrency/default-selection.go

* Упражнение: Эквивалентные бинарные деревья

Может существовать много бинарных деревьев, которые хранят одинаковые значения.
Например, здесь представлены два бинарных дерева, хранящих значения 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Функция для проверки того, что бинарные деревья содержат одинаковые значения, довольно сложные во многих языках.
Мы будем использовать конкурентность Go и каналы для написания простого решения.

Данный пример использует пакет `tree`, который определяет тип:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Продолжение описания на [[javascript:click('.next-page')][следующей странице]].

* Упражнение: Эквивалентные бинарные деревья

*1.* Реализуйте функцию `Walk`.

*2.* Протестируйте функцию `Walk`.

Функция `tree.New(k)` создает новое дерево со случайной структурой, содержащее значения `k`, `2k`, `3k`, ..., `10k`.

Создайте новый канал `ch` и запустите проход по дереву:

	go Walk(tree.New(1), ch)

Затем считайте и выведите 10 значений из канала. Это должны быть числа 1, 2, 3, ..., 10.

*3.* Реализуйте функцию `Same` используя функцию `Walk`, чтобы узнать, содержат ли `t1` и `t2` одинаковые значения.

*4.* Протестируйте функцию `Same`.

`Same(tree.New(1),`tree.New(1))` должно возвращать true, а `Same(tree.New(1),`tree.New(2))` должно возвращать false.

Документация `Tree` доступна [[https://godoc.org/golang.org/x/tour/tree#Tree][здесь]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Вы увидели, насколько каналы хороши для коммуникации между горутинами.

Но что, если нам не нужна коммуникация? Что, если мы просто хотим удостововериться, что в каждый момент времени
только одна горутина может иметь доступ к переменной, во избежание конфликтов?

Эта концепция называется _взаимным_исключением_, и традиционно структура, которая его предоставляет, называется _mutex_.

Стандартная библиотека Go предоставляет взаимные исключения с использованием
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] и его двумя методами:

- `Lock`
- `Unlock`

Мы можем определить блок кода, который должен выполниться во взаимном исключении, окружив его вызовами
методов `Lock` и `Unlock`, как показано в методе `Inc`.

Мы также можем использовать `defer`, чтобы удостовериться в том, что `mutex` будет разблокирован,
как в методе `Value`.

.play concurrency/mutex-counter.go

* Упражнение: Web-парсер

В этом упражнении вы будете использовать возможности Go для конкуретного программирования,
чтобы распараллелить web-парсер.

Измените функцию `Crawl` для обрабоки URL параллельно, при этом не обрабатывая один и тот же URL дважды.

_Совет_: вы можете сохранять обработанные URL в словаре, но словари сами по себе небезопасны для параллельного
использования!

.play concurrency/exercise-web-crawler.go

* Что дальше...

#appengine: Вы можете начать с
#appengine: [[https://golang.org/dl/][установки Go]].

#appengine: После установки Go,
[[https://golang.org/doc/][документация Go]] является отличным местом
#appengine: для продолжения.

Она содержит ссылки, обучения, видео и многое другое.

Что узнать, как организовывать и работать с кодом на Go, посмотрите
[[https://www.youtube.com/watch?v=XCsL89YtqCs][это видео]] или прочиайте
[[https://golang.org/doc/code.html][Как писать код на Go]].

Если вам нужна помощь со стандартной библиотекой, посмотрите [[https://golang.org/pkg/][описание пакетов]].
Для помощи по самому языку, вы можете прочитать [[https://golang.org/ref/spec][спецификацию языка]].

Для дальшейшего изучения конкуретного программирования в Go посмотрите
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][слайды]])
и
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][слайды]])
и прочтите статью
[[https://golang.org/doc/codewalk/sharemem/][Share memory by communicating]].

Чтобы начать писать web-приложения, посмотрите
[[https://vimeo.com/53221558][The simple programming environment]]
([[https://talks.golang.org/2012/simple.slide][слайды]])
и пройдите обучение
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]].

Статья [[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]] содержит интересный обзор о
функция в Go.

[[https://blog.golang.org/][Блог Go]] содержит огромный архив полезные статей о Go.

Посетите [[https://golang.org][golang.org]] для большей информации.

